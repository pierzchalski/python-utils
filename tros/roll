#! /usr/bin/python3

import random
import argparse
import math
import scipy.special as scipy_special

def p_le(tn):
    # can't roll less than 1
    if tn < 1:
        return 0.0
    # can't roll a multiple of 10, so rolling 10*k or less is the same as rolling
    # less than 10*k
    if tn % 10 == 0:
        return p_lt(tn)
    # derivation:
    #   say d = 10 * t + i, where 0 < i < 10 (we assume d is not a multiple
    #   of 10). To roll d, we need to get t 10's, then a single i,
    #   so P(roll = d) is ((1/10) ** t) * (1/10) == (1/10) ** (t + 1).
    #
    #   We also have
    #     P(0 < roll < 10) = 0.9 (need to roll exactly zero 10's)
    #     P(10 < roll < 20) = 0.09 (need to roll exactly one 10)
    #     ...etc.
    #
    #   So
    #     P(roll <= d) = P(0 < roll < 10)
    #                    + P(10 < roll < 20)
    #                    + ...
    #                    + P(10 * t < roll <= 10 * t + i)
    #                  = 9 * (1/10)
    #                    + 9 * ((1/10) ** 2)
    #                    + ...
    #                    + 9 * ((1/10) ** t)
    #                    + i * ((1/10) ** (t + 1))
    #   Using geometric sums:
    #     P(roll <= d) = (9/10) * ( 1 - ((1/10) ** t) )
    #                             (-------------------)
    #                             (     1 - (1/10)    )
    #                    + i * ((1/10) ** (t + 1))
    #                  = 1 + (i - 10) * ((1/10) ** (t + 1))
    return 1 + ((tn % 10) - 10) * (0.1 ** ((tn // 10) + 1))

def p_ge(tn):
    return 1 - p_lt(tn)

def p_gt(tn):
    return 1 - p_le(tn)

def p_lt(tn):
    return p_le(tn - 1)

def p_eq(tn):
    return p_le(tn) - p_lt(tn)

def p_interval(lo, hi_exclusive):
    return p_lt(hi_exclusive) - p_lt(lo)

def p_botch(lvl, tn):
    # can't botch if you can't fail.
    if tn <= 1:
        return 0.0
    # can't botch if you can't roll two 1's.
    if lvl <= 1:
        return 0.0
    # derivation:
    #   P(failure and at least two 1's)
    #       (iterating over all divisions into 1's and not-1's)
    #     = sum(i=2...lvl; lvl!/(i!(lvl-i)!) p_eq(1)**i p_interval(2, tn)**(lvl - i))
    #     = sum(i=0...lvl; ...)
    #       - p_interval(2, tn) ** lvl
    #       - n p_eq(1) p_interval(2, tn) ** (lvl - 1)
    #   But sum(i=0...n; ...)
    #     = P(failure and at least zero 1's)
    #     = P(failure) = p_lt(tn) ** lvl
    return (p_lt(tn) ** lvl) - (p_interval(2, tn) ** lvl) \
        - lvl * p_eq(1) * (p_interval(2, tn) ** (lvl - 1))

def p_roll_eq(lvl, tn, s):
    # can't get more successes than rolls
    if s > lvl:
        return 0.0
    # can't get negative successes
    if s < 0:
        return 0.0
    count = math.factorial(lvl) // \
        (math.factorial(s) * math.factorial(lvl - s))
    return count * (p_ge(tn) ** s) * (p_interval(1, tn) ** (lvl - s))

def p_roll_le(lvl, tn, s):
    # can't roll a negative number of successes.
    if s < 0:
        return 0.0
    # can always roll up to lvl successes
    if s >= lvl:
        return 1.0
    p = p_ge(tn)
    q = 1 - p
    # derivation: WolframAlpha for sum(i = 0...s) p_roll_eq(lvl, tn, i)
    return 1 - (math.factorial(lvl) \
            * p**(s + 1) \
            * q**(lvl - (s + 1)) \
            * scipy_special.hyp2f1(1, s - lvl + 1, s + 2, -p/q)
        ) / (math.factorial(s + 1) * math.factorial(lvl - (s + 1)))

def p_roll_lt(lvl, tn, s):
    return p_roll_le(lvl, tn, s - 1)

def p_roll_ge(lvl, tn, s):
    return 1 - p_roll_lt(lvl, tn, s)

def p_roll_gt(lvl, tn, s):
    return 1 - p_roll_le(lvl, tn, s)

# probability that (number of successes of lvl1/tn1) minus
# (number of successes of lvl2/tn2) equals s
def p_roll_diff_eq(lvl1, tn1, lvl2, tn2, s):
    return sum((\
        p_roll_eq(lvl1, tn1, k) \
        * p_roll_eq(lvl2, tn2, k - s) \
        for k in range(0, lvl1)))

def p_roll_diff_le(lvl1, tn1, lvl2, tn2, s):
    # derivation:
    #   P(diff <= s)
    #     = sum(k = 0...lvl1) P(we roll k) * P(diff <= s | we roll k)
    #     = sum(k = 0...lvl1) P(we roll k) * P(they roll >= k - s)
    return sum((\
        p_roll_eq(lvl1, tn1, k) \
        * p_roll_ge(lvl2, tn2, k - s) \
        for k in range(0, lvl1)))

def p_roll_diff_lt(lvl1, tn1, lvl2, tn2, s):
    return p_roll_diff_le(lvl1, tn1, lvl2, tn2, s - 1)

def p_roll_diff_ge(lvl1, tn1, lvl2, tn2, s):
    return 1 - p_roll_diff_lt(lvl1, tn1, lvl2, tn2, s)

def p_roll_diff_gt(lvl1, tn1, lvl2, tn2, s):
    return 1 - p_roll_diff_le(lvl1, tn1, lvl2, tn2, s)

def roll_stack():
    roll = random.randint(1, 10)
    if roll == 10:
        return roll + roll_stack()
    return roll

def attr_subcommand(args):
    print('P(botch): {:2.3f}'.format(p_botch(args.lvl, args.tn)))
    print('Probability of degrees of success:')
    for i in range(0, args.lvl + 1):
        p_eq = p_roll_eq(args.lvl, args.tn, i)
        p_ge = p_roll_ge(args.lvl, args.tn, i)
        print('P(=={:2d}): {:2.3f}, P(>={:2d}): {:2.3f}'.format(\
            i, p_eq, i, p_ge))

def cast_subcommand(args):
    if args.target == None:
        args.target = args.ctn
    if args.p_succ < 0 or args.p_succ >= 1:
        raise ValueError('p_succ was not between 0 and 1')
    if args.p_no_age < 0 or args.p_no_age >= 1:
        raise ValueError('p_no_age was not between 0 and 1')
    cast = 0
    while p_roll_ge(cast, args.ctn, 1) <= args.p_succ:
        cast += 1
    age = 0
    while p_roll_ge(age, args.ctn, args.target) <= args.p_no_age:
        age += 1
    print('Cast: {:2d}, P(botch): {:2.3f}'.format(\
        cast, p_botch(cast, args.ctn)))
    print('Age:  {:2d}, P(botch): {:2.3f}'.format(\
        age, p_botch(age, args.ctn)))

def cont_subcommand(args):
    print('P(you botch):  {:2.3f}'.format(p_botch(args.your_lvl, args.your_tn)))
    print('P(they botch): {:2.3f}'.format(p_botch(args.their_lvl, args.their_tn)))
    print('Probability of margins of success:')
    for i in range(-args.their_lvl, args.your_lvl + 1):
        p_eq = p_roll_diff_eq(args.your_lvl, args.your_tn, \
            args.their_lvl, args.their_tn, i)
        p_ge = p_roll_diff_ge(args.your_lvl, args.your_tn, \
            args.their_lvl, args.their_tn, i)
        print('P(=={:2d}): {:2.3f}, P(>={:2d}): {:2.3f}'.format(\
            i, p_eq, i, p_ge))

def no_subcommand(parser):
    def magic(args):
        parser.parse_args(['-h'])
    return magic

def main():
    parser = argparse.ArgumentParser(\
        formatter_class=argparse.RawTextHelpFormatter, \
        description='Dice roll utilities for The Riddle of Steel')
    parser.set_defaults(func=no_subcommand(parser))
    subparsers = parser.add_subparsers()

    attr_parser = subparsers.add_parser('attr', \
        help=\
'''Calling `roll attr <ndice> <tn>` analyses results of rolling <ndice> d10s
against a TN of <tn>. For instance, `roll attr 8 5` analyses rolling 8 d10s
againt a TN of 5. The results include the probability of:
    - botching the result, `P(botch)`
    - getting exactly a number of successes, `P(== n)`
    - getting at least a number of successes, `P(>= n)`

''')
    attr_parser.add_argument('lvl', type=int, \
        help='the level of the attribute (number of dice rolled)')
    attr_parser.add_argument('tn', type=int, \
        help='target number to roll against')
    attr_parser.set_defaults(func=attr_subcommand)

    cast_parser = subparsers.add_parser('cast', \
        help=\
'''Calling `roll cast <ctn> <p_succ> <p_no_age> --target=<t_age>` finds the
minimum casting dice and ageing dice such that, for a spell with a casting TN of
<ctn>:
    - The probability of successfully casting is at least <p_succ>
    - The probability of getting at least <t_age> ageing successes is at least
      <p_no_age>.
Also shows the probability of botching in each case.
If <t_age> isn't set, the default is equal to <ctn>.

''')
    cast_parser.add_argument('ctn', type=int, \
        help='the casting target number of the spell')
    cast_parser.add_argument('p_succ', type=float, \
        help='the minimum probability of succeeding')
    cast_parser.add_argument('p_no_age', type=float,
        help='the minimum probability of getting at least the target number of ageing successes (see "--target").')
    cast_parser.add_argument('-t', '--target', type=float,
        help='the minimum number of ageing successes required. Defaults to <ctn>.')
    cast_parser.set_defaults(func=cast_subcommand)

    cont_parser = subparsers.add_parser('cont', \
        help=\
'''Calling `roll cont <your_dice> <your_tn> <their_dice> <their_tn>` analyses
the result of a contested roll of <your_dice>/<your_tn> vs
<their_dice>/<their_tn>. The results include the probability of:
    - each contestant botching the result, `P(you botch)`,
      `P(they botch)`
    - getting exactly a number of net successes your way, `P(== n)`
    - getting at least a number of net successes your way, `P(>= n)`
    
''')
    cont_parser.add_argument('your_lvl', type=int, \
        help='your level of the attribute (number of dice rolled)')
    cont_parser.add_argument('your_tn', type=int, \
        help='your target number to roll against')
    cont_parser.add_argument('their_lvl', type=int, \
        help='their level of the attribute (number of dice rolled)')
    cont_parser.add_argument('their_tn', type=int, \
        help='their target number to roll against')
    cont_parser.set_defaults(func=cont_subcommand)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
